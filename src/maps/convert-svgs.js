const fs = require('fs');
const rimraf = require('rimraf');
const svgson = require('svgson');

const capitalize = s => s.toLowerCase().split(' ').map(word => word[0].toUpperCase() + word.slice(1)).join(' ');

// Human readable json stringify where simple arrays use only one line.
// https://gist.github.com/nrkn/c7a89bb7039182314415
const stringify = (object) => {
  const isPrimitive = obj => obj === null || ['string', 'number', 'boolean'].includes(typeof obj);
  const isArrayOfPrimitive = obj => Array.isArray(obj) && obj.every(isPrimitive);
  const format = arr => `^^^[ ${arr.map(val => JSON.stringify(val)).join(', ')} ]`;
  const replacer = (key, value) => (isArrayOfPrimitive(value) ? format(value) : value);
  const expand = str => str.replace(/(?:"\^\^\^)(\[ .* \])(?:")/g, (match, a) => a.replace(/\\"/g, '"'));
  return expand(JSON.stringify(object, replacer, 2));
};

const asyncForEach = async (a, cb) => {
  for (let i = 0; i < a.length; i += 1) {
    // eslint-disable-next-line no-await-in-loop
    await cb(a[i], i, a);
  }
};

const SVG_MAP_FILES = `${__dirname}\\svg`;
const JSON_MAP_FILES = `${__dirname}\\json`;
const EXPORTS_FILE = `${__dirname}\\index.js`;

class ConvertSVGs {
  async cleanAndCreateFolder(path) {
    await rimraf.sync(path);

    if (!fs.existsSync(path)) {
      fs.mkdirSync(path);
    }
  }

  async cleanAndCreateFile(path, data) {
    await rimraf.sync(path);

    if (!fs.existsSync(path)) {
      try {
        fs.writeFileSync(path, data);
      } catch (e) {
        throw e;
      }
    }
  }

  async run() {
    await this.cleanAndCreateFolder(JSON_MAP_FILES);

    const files = fs.readdirSync(SVG_MAP_FILES);

    const exports = [];
    const imports = [];

    await asyncForEach(files, async (filename) => {
      const path = `${SVG_MAP_FILES}\\${filename}`;
      const svg = fs.readFileSync(path, 'utf8');

      svgson.parse(svg).then(json => {
        const name = filename.split('.')[0];

        const layers = json.children.filter(({ name }) => name === 'path').map(({ attributes }) => ({
          id: attributes.id.toLowerCase(),
          name: attributes.title || capitalize(attributes.id),
          d: attributes.d,
        }));

        const map = {
          id: name,
          name: capitalize(name.split('-').join(' ')),
          viewBox: `0 0 ${json.attributes.width} ${json.attributes.height}`,
          layers,
        };

        fs.writeFileSync(`${JSON_MAP_FILES}\\${name}.json`, stringify(map));1

        const temp = capitalize(name.split('-').join(' ')).split(' ').join('');
        const safeName = temp.charAt(0).toLowerCase() + temp.substr(1);

        imports.push(`import ${safeName} from './json/${name}.json';`);
        exports.push(`  ${safeName},`);
      });
    });

    await this.cleanAndCreateFile(EXPORTS_FILE, [
      '/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */',
      '',
      ...imports,
      '',
      'export {',
      ...exports,
      '};',
    ].join('\n'));
  }
}

const convertSVGs = new ConvertSVGs;
convertSVGs.run();
